public class PostfixEv {

	public static int evaluate(String s) {

		String[] splitted = s.split(" ");

		ArrayStack stack = new ArrayStack(splitted.length);
		
		int op1, op2;

		for(int i = 0; i<splitted.length; i++) {

			switch(splitted[i]) {

			case "+" : op2 = stack.pop(); op1= stack.pop(); stack.push(op1 + op2);break;
			case "-" : op2 = stack.pop(); op1= stack.pop(); stack.push(op1 - op2);break;
			case "*" : op2 = stack.pop(); op1= stack.pop(); stack.push(op1 * op2);break;
			case "/" : op2 = stack.pop(); op1= stack.pop(); stack.push(op1 / op2);break;
//			default : stack.push(new Integer(splitted[i]));
			default : stack.push(Integer.parseInt(splitted[i]));

			}

		}
		
		return stack.pop();

	}
	
	public static ArrayStack decompose(ArrayStack x) {
		
		ArrayStack odd = new ArrayStack(x.size());
		ArrayStack even = new ArrayStack(x.size());
		
		for(int i = 1; i<=x.size(); i+=2) {
			
			odd.push(x.pop());
			even.push(x.pop());
			
		}
		
		for(int i = 0; i<x.size(); i++) {
			
			x.push(odd.pop());
			
		}
		
		return x;
		
	}
	
	public static void removeNth(ArrayStack s, int n) {
		
		ArrayStack x = new ArrayStack(s.size());
		
		for(int i = s.size(); i>n; i--) {
			
			x.push(s.pop());
			
		}
		
		s.pop();
		
		for(int i = x.size(); i>0; i--) {
			
			s.push(x.pop());
			
		}
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
